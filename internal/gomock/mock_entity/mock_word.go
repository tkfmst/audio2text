// Code generated by MockGen. DO NOT EDIT.
// Source: ./entity/word.go

// Package mock_entity is a generated GoMock package.
package mock_entity

import (
	reflect "reflect"
	time "time"

	id "example.com/audio2text/internal/entity/id"
	gomock "github.com/golang/mock/gomock"
)

// MockWord is a mock of Word interface.
type MockWord struct {
	ctrl     *gomock.Controller
	recorder *MockWordMockRecorder
}

// MockWordMockRecorder is the mock recorder for MockWord.
type MockWordMockRecorder struct {
	mock *MockWord
}

// NewMockWord creates a new mock instance.
func NewMockWord(ctrl *gomock.Controller) *MockWord {
	mock := &MockWord{ctrl: ctrl}
	mock.recorder = &MockWordMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWord) EXPECT() *MockWordMockRecorder {
	return m.recorder
}

// EndTime mocks base method.
func (m *MockWord) EndTime() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EndTime")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// EndTime indicates an expected call of EndTime.
func (mr *MockWordMockRecorder) EndTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndTime", reflect.TypeOf((*MockWord)(nil).EndTime))
}

// ID mocks base method.
func (m *MockWord) ID() *id.WordID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(*id.WordID)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockWordMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockWord)(nil).ID))
}

// StartTime mocks base method.
func (m *MockWord) StartTime() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTime")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// StartTime indicates an expected call of StartTime.
func (mr *MockWordMockRecorder) StartTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTime", reflect.TypeOf((*MockWord)(nil).StartTime))
}

// String mocks base method.
func (m *MockWord) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockWordMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockWord)(nil).String))
}

// TextID mocks base method.
func (m *MockWord) TextID() *id.TextID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TextID")
	ret0, _ := ret[0].(*id.TextID)
	return ret0
}

// TextID indicates an expected call of TextID.
func (mr *MockWordMockRecorder) TextID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TextID", reflect.TypeOf((*MockWord)(nil).TextID))
}
