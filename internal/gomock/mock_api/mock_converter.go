// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/if/api/converter.go

// Package mock_api is a generated GoMock package.
package mock_api

import (
	reflect "reflect"

	entity "example.com/audio2text/internal/entity"
	id "example.com/audio2text/internal/entity/id"
	gomock "github.com/golang/mock/gomock"
)

// MockConverter is a mock of Converter interface.
type MockConverter struct {
	ctrl     *gomock.Controller
	recorder *MockConverterMockRecorder
}

// MockConverterMockRecorder is the mock recorder for MockConverter.
type MockConverterMockRecorder struct {
	mock *MockConverter
}

// NewMockConverter creates a new mock instance.
func NewMockConverter(ctrl *gomock.Controller) *MockConverter {
	mock := &MockConverter{ctrl: ctrl}
	mock.recorder = &MockConverterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConverter) EXPECT() *MockConverterMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockConverter) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockConverterMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockConverter)(nil).CloseSend))
}

// Recv mocks base method.
func (m *MockConverter) Recv(aid *id.AudioID) (entity.Text, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv", aid)
	ret0, _ := ret[0].(entity.Text)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockConverterMockRecorder) Recv(aid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockConverter)(nil).Recv), aid)
}

// Send mocks base method.
func (m *MockConverter) Send(buf []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", buf)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockConverterMockRecorder) Send(buf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockConverter)(nil).Send), buf)
}
