// Code generated by MockGen. DO NOT EDIT.
// Source: ./entity/text.go

// Package mock_entity is a generated GoMock package.
package mock_entity

import (
	reflect "reflect"

	entity "example.com/audio2text/entity"
	id "example.com/audio2text/entity/id"
	gomock "github.com/golang/mock/gomock"
)

// MockText is a mock of Text interface.
type MockText struct {
	ctrl     *gomock.Controller
	recorder *MockTextMockRecorder
}

// MockTextMockRecorder is the mock recorder for MockText.
type MockTextMockRecorder struct {
	mock *MockText
}

// NewMockText creates a new mock instance.
func NewMockText(ctrl *gomock.Controller) *MockText {
	mock := &MockText{ctrl: ctrl}
	mock.recorder = &MockTextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockText) EXPECT() *MockTextMockRecorder {
	return m.recorder
}

// AudioID mocks base method.
func (m *MockText) AudioID() *id.AudioID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AudioID")
	ret0, _ := ret[0].(*id.AudioID)
	return ret0
}

// AudioID indicates an expected call of AudioID.
func (mr *MockTextMockRecorder) AudioID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AudioID", reflect.TypeOf((*MockText)(nil).AudioID))
}

// ID mocks base method.
func (m *MockText) ID() *id.TextID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(*id.TextID)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockTextMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockText)(nil).ID))
}

// ReadWord mocks base method.
func (m *MockText) ReadWord() (entity.Word, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadWord")
	ret0, _ := ret[0].(entity.Word)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// ReadWord indicates an expected call of ReadWord.
func (mr *MockTextMockRecorder) ReadWord() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadWord", reflect.TypeOf((*MockText)(nil).ReadWord))
}
